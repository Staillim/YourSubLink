rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
    }
    
    match /links/{linkId} {
      allow create: if isOwner(request.resource.data.userId) || isAdmin();
      allow read: if true;
      allow update: if (isOwner(resource.data.userId) || isAdmin()) || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'generatedEarnings']));
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /clicks/{clickId} {
      allow create: if true;
      allow read, list: if isAdmin();
    }

    match /payoutRequests/{requestId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow update: if isAdmin();
        // The following rule is safe because we check the userId in the query on the client-side.
        allow list: if request.auth != null || isAdmin();
    }

    match /cpmHistory/{cpmId} {
        allow read, list: if request.auth != null;
        allow create, update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read, list, update: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isAdmin(); // Only admins can create global notifications
    }
    
    match /supportTickets/{ticketId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      allow update: if isOwner(resource.data.userId) || isAdmin();
      
      match /messages/{messageId} {
        allow read, list: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
        allow create: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
      }
    }
  }
}
