
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helpers ---
    function isAdmin() {
      return get(
        /databases/$(database)/documents/users/$(request.auth.uid)
      ).data.role == 'admin';
    }
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- users ---
    match /users/{userId} {
      allow read:   if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
    }

    // --- links ---
    match /links/{linkId} {
      // Anyone can read a link's data
      allow read:   if true;
      // Only the owner or an admin can create, update, or delete a link.
      // The client no longer updates clicks directly, this is handled by a backend process.
      allow create, update, delete: if isOwner(request.resource.data.userId) || isAdmin();
    }

    // --- clicks ---
    match /clicks/{clickId} {
      // Anyone can create a click document. This is critical for the counting logic.
      allow create: if true;
      // Only admins can read the list of clicks for analysis.
      allow read, list: if isAdmin();
       // Backend processes will update this field, not users.
      allow update: if false;
    }

    // --- payoutRequests ---
    match /payoutRequests/{requestId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read:   if isOwner(resource.data.userId) || isAdmin();
      allow update: if isAdmin();
      allow list:   if (
                        request.query.where.path == 'userId'
                        && request.query.where.value == request.auth.uid
                      )
                      || isAdmin();
    }

    // --- cpmHistory ---
    match /cpmHistory/{cpmId} {
      allow read, list:    if request.auth != null;
      allow create, update: if isAdmin();
    }

    // --- notifications ---
    match /notifications/{notificationId} {
      allow read, list, update: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin();
    }

    // --- supportTickets y mensajes ---
    match /supportTickets/{ticketId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read:   if isOwner(resource.data.userId) || isAdmin();
      allow update: if isAdmin()
                   || (
                     isOwner(resource.data.userId)
                     && request.resource.data.diff(resource.data)
                          .affectedKeys()
                          .hasOnly([
                            'lastMessage',
                            'lastMessageTimestamp',
                            'isReadByAdmin',
                            'isReadByUser',
                            'status'
                          ])
                   );
      allow list:   if (
                        request.query.where.path == 'userId'
                        && request.query.where.value == request.auth.uid
                      )
                    || isAdmin();
      
      match /messages/{messageId} {
        allow read, list: if isAdmin()
                         || get(
                              /databases/$(database)/documents/supportTickets/$(ticketId)
                            ).data.userId == request.auth.uid;
        allow create: if isAdmin() || request.resource.data.senderId == request.auth.uid;
        allow update: if isAdmin()
                     || (
                       get(
                         /databases/$(database)/documents/supportTickets/$(ticketId)
                       ).data.status != 'completed'
                       && get(
                            /databases/$(database)/documents/supportTickets/$(ticketId)
                          ).data.userId == request.auth.uid
                     );
      }
    }

  }
}
