rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // Rules for 'links' collection
    match /links/{linkId} {
      // Allow reading a link document by its ID.
      // Necessary for the client to get link details (rules, original URL).
      allow get: if true;
      
      // Allow anonymous users to query for a link using its shortId.
      // This is the entry point for a visitor.
      allow list: if request.query.get('where') == [['shortId', '==', request.query.get('value')[0]]];

      // Only the owner can create, update, or delete their own links.
      allow create, update, delete: if isOwner(request.resource.data.userId);
    }
    
    // Rules for 'users' collection
    match /users/{userId} {
      // Allow anyone to get a user's document.
      // This is crucial for the ClientComponent to check if a link owner is suspended.
      allow get: if true;

      // Only the owner can modify their own profile.
      allow update: if isOwner(userId);

      // Only admins can create or delete users (implicitly, via other flows)
      allow create, delete: if isAdmin();
      
      // Only admins can list all users.
      allow list: if isAdmin();
    }

    // Rules for 'clicks' collection
    match /clicks/{clickId} {
      // Allow anyone to create a click document.
      // The security is enforced by checking the link owner's status on the server-side
      // within the 'get()' function call. This is secure.
      allow create: if get(/databases/$(database)/documents/links/$(request.resource.data.linkId)).data.userId != null;

      // No one can read or modify click logs directly.
      // This will be handled by a backend process in the future.
      allow read, update, delete: if false;
    }

    // Admins can list any collection for their dashboard panels.
    match /payoutRequests/{docId} {
        allow list, read: if isAdmin() || isOwner(resource.data.userId);
        allow create: if isOwner(request.resource.data.userId);
        allow update: if isAdmin();
    }
    
    match /notifications/{docId} {
        allow list, read, update: if isOwner(resource.data.userId);
    }

    match /cpmHistory/{docId} {
      allow list, read: if isAuth();
      allow create, update: if isAdmin();
    }

    match /supportTickets/{ticketId} {
      allow read, create, update: if isOwner(resource.data.userId) || isAdmin();
      allow list: if isAdmin();
      
      match /messages/{messageId} {
        allow read, create: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
        allow list: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
      }
    }
  }
}
