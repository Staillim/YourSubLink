rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      // Check if the user is authenticated and if their profile document has the 'admin' role.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the incoming request is from the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // USERS Collection
    match /users/{userId} {
      // Allow anyone to get a single user document. 
      // This is crucial for the /clicks create rule to check if the link owner's account is suspended.
      allow get: if true;
      
      // Allow admins to list all users and update any user profile.
      // Users can update their own profile.
      allow list, write: if isAdmin();
      allow update: if isOwner(userId);

      // No one can create or delete user documents from the client.
      allow create, delete: if false;
    }

    // LINKS Collection
    match /links/{linkId} {
      // Anyone can read link documents so the link page can load.
      allow read: if true;
      
      // Authenticated users can create links for themselves.
      allow create: if isOwner(request.resource.data.userId);

      // The owner or an admin can update/delete their links.
      allow update, delete: if isOwner(get(/databases/$(database)/documents/links/$(linkId)).data.userId) || isAdmin();
    }

    // CLICKS Collection
    match /clicks/{clickId} {
      // Anyone can create a click log.
      // The client-side code already verifies if the link owner is suspended before attempting to write.
      // This simplified rule prevents permission errors during the write operation itself.
      allow create: if true;

      // No one can read, update, or delete individual click logs from the client.
      allow read, update, delete: if false;
    }

    // PAYOUT REQUESTS Collection
    match /payoutRequests/{payoutId} {
      // A user can read their own payout requests.
      allow read: if isOwner(resource.data.userId);
      // A user can create a payout request for themselves.
      allow create: if isOwner(request.resource.data.userId);
      
      // Admins have full read/update access to all payout requests.
      allow get, list, update: if isAdmin();
      // Deleting payout requests is not allowed from the client.
      allow delete: if false;
    }

    // NOTIFICATIONS Collection
    match /notifications/{notificationId} {
      // A user can read their own notifications, and an admin can read all notifications.
      // This covers both 'get' for single notifications and 'list' for queries.
      allow read: if isOwner(resource.data.userId) || isAdmin();

      // Writing to notifications is restricted to admins (e.g., for global announcements)
      // or server-side functions (which have full access and bypass these rules).
      allow write: if isAdmin();
    }

    // SUPPORT TICKETS Collection
    match /supportTickets/{ticketId} {
      // Users can manage their own tickets, admins can manage any ticket.
      allow read, write: if isOwner(resource.data.userId) || isAdmin();
      
      // Nested messages collection
      match /messages/{messageId} {
        // Only the ticket owner and admins can read messages.
        allow read: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
        // Users can create messages in their own tickets, and admins can reply to any ticket.
        allow create: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
        // No one can update or delete messages from the client.
        allow update, delete: if false;
      }
    }
    
    // CPM HISTORY Collection
    match /cpmHistory/{historyId} {
      // Reading CPM history is allowed for admins only, as it's not needed by the client anymore.
      allow read: if isAdmin();
      // Only admins can modify the CPM history.
      allow write: if isAdmin();
    }
  }
}
