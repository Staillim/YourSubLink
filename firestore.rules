rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
    }

    match /links/{linkId} {
      allow read;
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId) || request.auth == null || isAdmin(); // Allow owner or server-side (unauth) or admin to update
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    match /clicks/{clickId} {
        allow create; // Allow client-side creation of click documents
        // Allow reading/listing clicks if the user owns the link or is an admin.
        // This is structured to support the `where("linkId", "==", linkId)` query.
        allow list, read: if request.auth.uid == get(/databases/$(database)/documents/links/$(request.query.linkId)).data.userId || isAdmin();
        allow write: if isOwner(get(/databases/$(database)/documents/links/$(request.resource.data.linkId)).data.userId) || isAdmin();
        allow delete: if false; // Clicks should not be deletable
    }

    match /cpmHistory/{cpmId} {
        allow read;
        allow write: if isAdmin();
    }

    match /payoutRequests/{payoutId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, list: if isOwner(resource.data.userId) || isAdmin();
        allow update: if isAdmin(); // Only admins can approve/reject payouts
    }

    match /notifications/{notificationId} {
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      allow create: if true; // Let server-side logic create notifications
    }
  }
}
