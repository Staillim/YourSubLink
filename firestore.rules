rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Allow reading user's own role data for this check.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId} {
      // An admin can read any user profile. A user can only read their own.
      allow read: if isOwner(userId) || isAdmin();
      // An admin can list all users.
      allow list: if isAdmin();
      // A user can create their own user document.
      allow create: if isOwner(userId);
      // An admin can update any field. A user can only update their own displayName.
      allow update: if (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName'])) || isAdmin();
    }

    match /links/{linkId} {
      allow read; // Links are public
      allow create: if isOwner(request.resource.data.userId);
      // Owner or admin can delete.
      allow delete: if isOwner(resource.data.userId) || isAdmin();
      // Public can update only counters via client-side logic.
      // Owner/Admin can update other details.
      allow update: if request.auth == null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'realClicks', 'generatedEarnings', 'earningsByCpm']) || 
                      (isOwner(resource.data.userId) || isAdmin());
    }

    match /clicks/{clickId} {
      // Anyone can create a click log (from the client).
      allow create;
      // Admins or the owner of the link can list clicks.
      // This rule requires that any 'list' query on the 'clicks' collection MUST include a 'where("linkId", "==", ...)' clause.
      allow list: if isAdmin() || (request.auth != null && get(/databases/$(database)/documents/links/$(request.query.linkId)).data.userId == request.auth.uid);
      // Admins or the owner of the link can read individual click documents.
      allow read: if isAdmin() || (request.auth != null && get(/databases/$(database)/documents/links/$(resource.data.linkId)).data.userId == request.auth.uid);
    }
    
    match /cpmHistory/{cpmId} {
        allow read;
        allow write: if isAdmin();
    }

    match /payoutRequests/{payoutId} {
        // User can create their own request.
        allow create: if isOwner(request.resource.data.userId);
        // User can read their own requests. Admin can read all.
        allow read, list: if isOwner(resource.data.userId) || isAdmin();
        // Only admin can update (approve/reject).
        allow update: if isAdmin();
    }
    
    match /settings/global {
      allow read;
      allow write: if isAdmin();
    }

    match /notifications/{notificationId} {
      // System can create notifications.
      allow create;
      // User can read their own notifications. Admin can read all.
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
    }
  }
}
