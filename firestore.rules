rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if only allowed fields are being updated for link clicks
    function isOnlyClickUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys()
             .hasOnly(['clicks', 'generatedEarnings']);
    }

    // Users collection
    match /users/{userId} {
      // Any authenticated user can create their own profile
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Admins can read any profile, users can read their own
      allow read: if isAdmin(request.auth.uid) || isOwner(userId);
      
      // Admins can update any profile, users can update their own
      allow update: if isAdmin(request.auth.uid) || isOwner(userId);
      
      // Only admins can delete users
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // Links collection
    match /links/{linkId} {
        // Anyone can read a link document, which is necessary to get the redirect URL.
        allow read: if true;
        
        // Only authenticated users can create links for themselves.
        allow create: if isOwner(request.resource.data.userId);
        
        // Owners can update their own links.
        // Also, ANYONE can update a link IF they are only incrementing the 'clicks' and 'generatedEarnings' fields.
        allow update: if isOwner(resource.data.userId) || isOnlyClickUpdate();
        
        // Owners and admins can delete links.
        allow delete: if isOwner(resource.data.userId) || isAdmin(request.auth.uid);
    }
    
    // Clicks collection (for logging individual clicks)
    match /clicks/{clickId} {
        // Anyone can create a new click record.
        allow create: if true;
        
        // Only admins should be able to read detailed click logs for analytics.
        allow read, list: if request.auth != null && isAdmin(request.auth.uid);
        
        // No one should be able to update or delete click logs to maintain data integrity.
        allow update, delete: if false;
    }

    // Payout Requests collection
    match /payoutRequests/{requestId} {
      // Users can read their own requests, admins can read all
      allow read, list: if isOwner(resource.data.userId) || isAdmin(request.auth.uid);
      
      // Users can create their own requests
      allow create: if isOwner(request.resource.data.userId);
      
      // Only admins can update requests (to approve/reject them)
      allow update: if isAdmin(request.auth.uid);
      
      // No one can delete requests to maintain history
      allow delete: if false;
    }
    
    // CPM History collection
    match /cpmHistory/{cpmId} {
        // Anyone needs to be able to read the active CPM to calculate earnings on the client.
        allow read: if true;
        
        // Only admins can create or update CPM rates.
        allow create, update, delete: if isAdmin(request.auth.uid);
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications, admins can read all
      allow read, list: if isOwner(resource.data.userId) || isAdmin(request.auth.uid);
      
      // Only the server (or admins) should create notifications
      allow create: if isAdmin(request.auth.uid);
      
      allow update, delete: if false;
    }
  }
}
