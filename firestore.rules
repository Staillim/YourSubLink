rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isUserAdmin(request.auth.uid));
      allow write: if request.auth != null && (request.auth.uid == userId || isUserAdmin(request.auth.uid));
    }

    match /links/{linkId} {
        allow read;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Allow owner to update their own link, OR allow server to update counters.
        allow update: if (request.auth != null && resource.data.userId == request.auth.uid) ||
                       (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'realClicks', 'generatedEarnings']));
        allow delete: if request.auth != null && (resource.data.userId == request.auth.uid || isUserAdmin(request.auth.uid));
    }

    match /clicks/{clickId} {
        // Allow server to create click documents
        allow create;
        // Allow link owner or admin to read click details
        allow read: if request.auth != null && (get(/databases/$(database)/documents/links/$(resource.data.linkId)).data.userId == request.auth.uid || isUserAdmin(request.auth.uid));
        // Allow link owner or admin to list clicks for a link
        allow list: if request.auth != null && request.query.linkId != null &&
                     (get(/databases/$(database)/documents/links/$(request.query.linkId)).data.userId == request.auth.uid || isUserAdmin(request.auth.uid));
    }

    match /payoutRequests/{requestId} {
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow read, update: if request.auth != null && (request.resource.data.userId == request.auth.uid || isUserAdmin(request.auth.uid));
    }

      match /notifications/{notificationId} {
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isUserAdmin(request.auth.uid));
        allow create: if isUserAdmin(request.auth.uid); // Allow admin to create notifications
      }

    match /cpmHistory/{historyId} {
          allow read, write: if request.auth != null && isUserAdmin(request.auth.uid);
    }
  }
}
