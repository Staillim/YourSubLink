
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users can only read/update their own profile. Admins can read anyone's.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      // Admins can manage any user document
      allow write: if isAdmin();
    }

    // Public can read single links, users manage their own, admins manage all.
    match /links/{linkId} {
      // READ: Anyone can get a single link for redirection. Admins can read all.
      // Users can only list their own links.
      allow get: if true;
      allow list: if isAdmin() || (request.auth != null && request.query.where.userId == request.auth.uid);

      // WRITE: Users can create their own links. Admins can manage any.
      allow create: if isOwner(request.resource.data.userId);
      allow delete: if isAdmin() || isOwner(resource.data.userId);
      
      // UPDATE: Admins/owners can update fully. Public API can ONLY increment clicks/earnings.
      allow update: if (isAdmin() || isOwner(resource.data.userId)) || 
                    (request.auth == null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'generatedEarnings']));
    }
    
    // Clicks can be created by anyone.
    // Reading clicks is restricted to the link owner or an admin.
    match /clicks/{clickId} {
      allow create: if true;
      allow read, list: if isAdmin() || (request.auth != null && get(/databases/$(database)/documents/links/$(request.query.where.linkId)).data.userId == request.auth.uid);
    }

    // Users can create/read their own payout requests.
    // Admins can manage all payout requests.
    match /payoutRequests/{requestId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, list: if isAdmin() || isOwner(resource.data.userId);
      allow update: if isAdmin(); // Only admins can approve/reject
    }
    
    // CPM history is read-only for authenticated users, managed by admins.
    match /cpmHistory/{cpmId} {
      allow read, list: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Notifications can be read by the user they are for.
    // Only admins (or system functions) can create them.
    match /notifications/{notificationId} {
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin(); 
    }
  }
}
