rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Check if the user is authenticated and has the 'admin' role in their user document.
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own profile.
      allow create: if request.auth.uid == userId;
      // Users can read/update their own profile. Admins can read/update any profile.
      allow read, update: if request.auth.uid == userId || isAdmin();
      // Only admins can list all users.
      allow list: if isAdmin();
    }

    // Rules for the 'links' collection
    match /links/{linkId} {
      // Authenticated users can create links.
      allow create: if request.auth.uid != null;
      // Users can update/delete their own links. Admins can manage any link.
      allow update, delete: if resource.data.userId == request.auth.uid || isAdmin();
      
      // ANYONE (public, unauthenticated users) can get a single link document. This is critical for the link gate to work.
      allow get: if true;

      // ANYONE (public, unauthenticated users) can query the links collection.
      // This is essential for the initial `where('shortId', '==', ...)` query to succeed for visitors.
      allow list: if true;
    }
    
    // Rules for the 'clicks' collection
    match /clicks/{clickId} {
        // ANYONE can create a click record. This happens on the client side.
        allow create: if true;
        // Only admins can read click data.
        allow read: if isAdmin();
    }

    // Rules for payout requests
    match /payoutRequests/{requestId} {
        // Users can create their own payout requests.
        allow create: if request.auth.uid == request.resource.data.userId;
        // Users can read their own requests. Admins can read all requests.
        allow read: if request.auth.uid == resource.data.userId || isAdmin();
        // Only admins can update the status of requests.
        allow update: if isAdmin();
    }

    // Rules for CPM history
    match /cpmHistory/{cpmId} {
        // Any authenticated user (user or admin) can read CPM history.
        allow read: if request.auth.uid != null;
        // Only admins can create/update CPM history.
        allow write: if isAdmin();
    }

    // Rules for notifications
    match /notifications/{notificationId} {
        // Users can read their own notifications. Admins can read all notifications.
        allow read: if request.auth.uid == resource.data.userId || isAdmin();
        // The system (or an admin) can create notifications.
        allow create: if true; 
    }
  }
}
