rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the requesting user has the 'admin' role in their user document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Collection Rules ---

    // Users can only read or update their own profile. Only admins can view all profiles.
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      // Deleting users should be handled server-side or with extreme caution.
      allow delete: if isAdmin();
    }

    // Link documents can be read by anyone (as they are public).
    // Creation and deletion are restricted.
    // Updates are restricted to owners/admins, with a special case for unauthenticated
    // API calls to increment click counters.
    match /links/{linkId} {
      allow read;
      allow create: if isOwner(request.resource.data.userId);
      // Owners and Admins can update their own link's mutable fields (title, rules, etc.).
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // This rule allows our unauthenticated API route to safely increment counters
    // without being able to change other critical link data.
    match /links/{linkId} {
        allow update: if request.auth == null &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                'clicks', 'realClicks', 'generatedEarnings', 'earningsByCpm'
            ]);
    }


    // Click documents can be created by our server-side API route.
    // They can only be read by admins or the owner of the associated link.
    match /clicks/{clickId} {
      allow create; // Anyone (specifically our API route) can create a click.
      allow read: if isAdmin() || isOwner(get(/databases/$(database)/documents/links/$(resource.data.linkId)).data.userId);
      // No one should update/delete raw click data from the client.
      allow update, delete: if false;
    }

    // CPM history is public to read, but only admins can modify it.
    match /cpmHistory/{cpmId} {
        allow read;
        allow write: if isAdmin();
    }

    // Users can create their own payout requests and view them.
    // Only admins can modify the status of a request (approve/reject).
    match /payoutRequests/{payoutId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow update: if isAdmin(); // Only admins can change status.
        allow delete: if isAdmin();
    }

    // Global settings can be read by anyone but only written by admins.
    match /settings/global {
      allow read;
      allow write: if isAdmin();
    }

    // Notifications can be created by the system (via server-side logic).
    // Users can only read their own notifications. Admins can read all.
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create;
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
  }
}
