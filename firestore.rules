rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) || isAdmin();
    }

    match /links/{linkId} {
      allow read: if true;
      allow list: if true;
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(get(after).data.userId) || isAdmin();
    }
    
    match /payoutRequests/{payoutId} {
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin();
    }

    match /notifications/{notificationId} {
        allow read, list, update: if isOwner(resource.data.userId) || isAdmin();
        allow create: if true; // Allows system/admins to create notifications for any user
    }
    
    match /cpmHistory/{historyId} {
        allow read: if true;
        allow create, update: if isAdmin();
    }

    match /supportTickets/{ticketId} {
      allow read, list, create, update: if isOwner(resource.data.userId) || isAdmin();
      match /messages/{messageId} {
        allow read, list, create: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
      }
    }

    match /clicks/{clickId} {
      allow read, list: if isAdmin();
      // Allow any visitor to create a click document. 
      // The backend flow will handle the validation and earnings calculation.
      allow create: if true;
    }
  }
}
