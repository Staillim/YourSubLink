rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin.
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read any user profile. Users can only read their own.
      allow read: if isAdmin() || request.auth.uid == userId;
      // Users can only update their own profile.
      allow update: if request.auth.uid == userId;
       // Admins can manage all user data.
      allow write: if isAdmin();
      // Allow users to create their own profile document.
      allow create: if request.auth.uid == userId;
    }

    // Rules for the 'links' collection
    match /links/{linkId} {
      // Allow anyone to get a single link document for redirection.
      allow get: if true;
      // Allow admins to list all links. Authenticated users can only list their own links.
      allow list: if isAdmin() || (request.auth != null && request.query.where.userId == request.auth.uid);
      // Allow authenticated users to create links for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;
      // Allow public updates only to 'clicks' and 'generatedEarnings' for counting visits.
      // Admins or link owners can update other fields.
      allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'generatedEarnings']))
                    || isAdmin()
                    || (request.auth != null && request.auth.uid == resource.data.userId);
      // Admins or link owners can delete links.
      allow delete: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.userId);
    }
    
    // Rules for the 'clicks' collection
    match /clicks/{clickId} {
      // Allow anyone to create a click document. This is a public write.
      allow create: if true;
      // Admins or the owner of the link can read the click data.
      allow read, list: if isAdmin() || (get(/databases/$(database)/documents/links/$(request.query.where.linkId)).data.userId == request.auth.uid);
    }

    // Rules for the 'payoutRequests' collection
    match /payoutRequests/{requestId} {
      // Users can read/list their own requests. Admins can read/list all.
      allow read, list: if isAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);
      // Users can create their own requests.
      allow create: if request.auth.uid == request.resource.data.userId;
      // Only admins can update (approve/reject) requests.
      allow update: if isAdmin();
    }
    
    // Rules for the 'cpmHistory' collection
    match /cpmHistory/{cpmId} {
      // Any authenticated user can read the CPM history.
      allow read, list: if request.auth != null;
      // Only admins can manage CPM rates.
      allow write: if isAdmin();
    }
    
    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
      // Admins can list/read all notifications. Users can only read their own.
      allow read, list: if isAdmin() || (request.auth != null && resource.data.userId == request.auth.uid);
      // Only admins (or a backend process) can create notifications.
      allow create: if isAdmin();
    }
  }
}
