rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if the user is the owner of a resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS
    // Users can only read/update their own profile. Admins can read anyone's.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
    }

    // LINKS
    // Public can read single links. Users manage their own. Admins manage all.
    // Public can update click/earnings counters.
    match /links/{linkId} {
      allow get: if true; // Public read for redirection
      allow list: if isAdmin() || (request.auth != null && request.query.where.userId == request.auth.uid);
      allow create: if request.auth != null && isOwner(request.resource.data.userId);
      allow update: if 
          (isAdmin() || (request.auth != null && isOwner(resource.data.userId))) || 
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'generatedEarnings'])); // Public can update only counters
      allow delete: if isAdmin() || (request.auth != null && isOwner(resource.data.userId));
    }
    
    // CLICKS
    // Clicks can be created by anyone.
    // Read by the link owner or an admin.
    match /clicks/{clickId} {
      allow create: if true;
      allow read, list: if isAdmin() || (request.auth != null && get(/databases/$(database)/documents/links/$(resource.data.linkId)).data.userId == request.auth.uid);
    }

    // PAYOUT REQUESTS
    // Users create/read their own. Admins manage all.
    match /payoutRequests/{requestId} {
      allow create: if request.auth != null && isOwner(request.resource.data.userId);
      allow list: if isAdmin() || (request.auth != null && request.query.where.userId == request.auth.uid);
      allow read, update: if isAdmin() || (request.auth != null && isOwner(resource.data.userId));
    }
    
    // CPM HISTORY
    // Read-only for authenticated users, managed by admins.
    match /cpmHistory/{cpmId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    // NOTIFICATIONS
    // Read by the user they are for. Created by admins/system.
    match /notifications/{notificationId} {
      allow read, list: if request.auth != null && (isOwner(resource.data.userId) || request.query.where.userId == request.auth.uid);
      allow create: if isAdmin(); // Or a system function
    }

  }
}
