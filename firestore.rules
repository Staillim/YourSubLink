rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check the user's custom claim or their role in a 'users' collection.
      // This example checks a 'role' field in the user's document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // PUBLIC: Anyone can read links
    match /links/{linkId} {
        // READ: Anyone can get a single link document (for redirection page)
        allow get: if true;
        
        // WRITE: Only owners and admins can create, delete, or fully update links.
        // A special exception allows anonymous users to update ONLY the 'clicks' and 'generatedEarnings' fields.
        allow create, delete: if request.auth != null && (isOwner(request.resource.data.userId) || isAdmin());
        allow update: if (request.auth != null && (isOwner(request.resource.data.userId) || isAdmin()))
                      || (request.auth == null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'generatedEarnings']));
    }
    
    // PUBLIC: Anyone can read CPM history to calculate earnings on the client
    match /cpmHistory/{cpmId} {
        allow get, list: if true;
    }

    // LOGGED IN USERS
    match /users/{userId} {
        // Users can read their own profile. Admins can read any profile.
        allow get: if isOwner(userId) || isAdmin();
        // Users can update their own profile. Admins can update any profile.
        allow update: if isOwner(userId) || isAdmin();
        // Users can create their own profile entry.
        allow create: if isOwner(userId);
    }
    
    // Rules for notifications
    match /notifications/{notificationId} {
        allow read, list, create: if isOwner(request.resource.data.userId) || isAdmin();
        allow update: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Rules for payout requests
    match /payoutRequests/{requestId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, list: if isOwner(resource.data.userId) || isAdmin();
        allow update: if isAdmin();
    }
    
    // Rules for click logs
    match /clicks/{clickId} {
        // Clicks can only be created via a batch write from the link redirection page
        allow create: if true; 
    }

    // Rules for the new support ticket system
    match /supportTickets/{ticketId} {
      allow create: if request.auth != null;
      // Users can get their own tickets. Admins can get any ticket.
      allow get: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
      // Admins can list all tickets for their dashboard.
      allow list: if isAdmin();
      allow update: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();

      // Rules for messages within a ticket
      match /messages/{messageId} {
        allow read, create, list: if isAdmin() || get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId == request.auth.uid;
      }
    }
  }
}
