
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // ============================================================
    // Helper Functions
    // ============================================================
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check if the user making the request has the 'admin' role in their user document.
      // Use get() to read a document from a different path.
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // ============================================================
    // USERS Collection
    // ============================================================
    match /users/{userId} {
      // READ (get):
      // - Any visitor can read a user profile. This is necessary for the client to check
      //   for account suspension or custom CPMs when processing a link visit.
      allow get: if true;
      
      // READ (list):
      // - Only admins can list multiple users.
      allow list: if isAdmin();
      
      // WRITE (Update/Set):
      // - Admins can update any user profile.
      // - Authenticated users can update their own profile, but cannot change their role.
      allow update: if isAdmin() || (isOwner(userId) && request.resource.data.role == resource.data.role);

      // CREATE:
      // - Users are created via a server-side process (Firebase Auth trigger), not directly.
      //   So direct creation is denied.
      allow create: if false;

      // DELETE:
      // - No one can delete user profiles directly.
      allow delete: if false;
    }

    // ============================================================
    // LINKS Collection
    // ============================================================
    match /links/{linkId} {
      // READ (get):
      // - Anyone can read a single link document if they have its ID.
      //   This is used by the ClientComponent after the server finds the ID.
      allow get: if true;
      
      // READ (list):
      // - An admin can list all links.
      // - An authenticated user can list their own links.
      // - Anyone can find a link using its shortId, but only one at a time.
      //   This is crucial for the server-side lookup on the link page.
      allow list: if isAdmin() || 
                     (isAuth() && request.query.where.userId == request.auth.uid) ||
                     (request.query.where.shortId != null && request.query.limit == 1);
      
      // CREATE:
      // - Only authenticated users can create links for themselves.
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      // UPDATE:
      // - Admins can update any field on any link.
      // - The owner of a link can update any field on their own link.
      // - Anyone (including anonymous users) can update ONLY the 'clicks' field, and
      //   it must be a simple increment of 1. This is for the raw visit count.
      allow update: if isAdmin() || 
                     (isOwner(get(/databases/$(database)/documents/links/$(linkId)).data.userId)) ||
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks']) &&
                      request.resource.data.clicks == resource.data.clicks + 1);

      // DELETE:
      // - Admins can delete any link.
      // - Authenticated users can delete their own links.
      allow delete: if isAdmin() || (isAuth() && get(/databases/$(database)/documents/links/$(linkId)).data.userId == request.auth.uid);
    }
    
     // ============================================================
    // CLICKS Collection
    // ============================================================
    // This collection logs every visit.
    match /clicks/{clickId} {
      // READ: Only admins should be able to read the raw click logs.
      allow read, list: if isAdmin();

      // CREATE: Anyone can create a click document. This allows anonymous visitors
      // to register their visit. The document must contain the required fields.
      allow create: if request.resource.data.keys().hasAll(['linkId', 'timestamp', 'userId', 'ip', 'userAgent', 'cookie']);
      
      // WRITE/DELETE: No modifications or deletions are allowed to preserve the log's integrity.
      allow update, delete: if false;
    }
    
    // ============================================================
    // PAYOUT REQUESTS Collection
    // ============================================================
    match /payoutRequests/{payoutId} {
        // READ/LIST: Admins can see all requests, users can see their own.
        allow get, list: if isAdmin() || (isOwner(resource.data.userId));
        
        // CREATE: Authenticated users can create requests for themselves.
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
        
        // UPDATE: Only admins can update the status of a request.
        allow update: if isAdmin();
        
        // DELETE: No one should delete payout requests to maintain history.
        allow delete: if false;
    }
    
    // ============================================================
    // CPM HISTORY Collection
    // ============================================================
    match /cpmHistory/{historyId} {
      // READ/LIST: Anyone can read CPM history. This is needed if the client-side
      // needs to display rates, although current logic doesn't require it.
      allow get, list: if true;
      
      // WRITE: Only admins can create or update CPM rates.
      allow write: if isAdmin();
    }
    
    // ============================================================
    // NOTIFICATIONS Collection
    // ============================================================
    match /notifications/{notificationId} {
      // READ/LIST: Users can only read their own notifications. Admins can read all.
      allow get, list: if isAdmin() || (isOwner(resource.data.userId));

      // CREATE: Server-side logic (or admins) create notifications. Not client-creatable.
      allow create: if isAdmin();

      // UPDATE: Users can mark their own notifications as read. Admins can too.
      allow update: if isAdmin() || (isOwner(resource.data.userId));

      // DELETE: No direct deletion.
      allow delete: if false;
    }
    
     // ============================================================
    // SUPPORT TICKETS Collection
    // ============================================================
    match /supportTickets/{ticketId} {
      // READ/LIST: Admins can see all tickets. Users can only see their own.
      allow get, list: if isAdmin() || (isOwner(resource.data.userId));
      
      // CREATE: Authenticated users can create tickets for themselves.
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      // UPDATE: Admins can update any ticket. Users can update their own tickets.
      allow update: if isAdmin() || (isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId));
      
      // Nested MESSAGES collection
      match /messages/{messageId} {
        // READ/LIST: Admins and the ticket owner can read messages.
        allow get, list: if isAdmin() || (isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId));
        
        // CREATE: Admins can send messages. The ticket owner can send messages.
        allow create: if isAdmin() || (isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId));
      }
    }
  }
}
