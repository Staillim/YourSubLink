
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Admins can read/write any user profile
      allow read, write: if isAdmin();
      // Authenticated users can read their own profile and update their own displayName
      allow get: if isSignedIn();
      allow update: if request.auth.uid == userId && request.resource.data.keys().hasOnly(['displayName']);
    }

    // Links collection rules
    match /links/{linkId} {
      // Anyone can read a link document (needed for the link redirection page)
      allow get: if true;
      // Authenticated users can create links and read/update/delete their own links
      allow list, create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      // Admins can perform any action on any link
      allow read, write: if isAdmin();
    }
    
    // Clicks collection rules
    match /clicks/{clickId} {
      // Clicks can be created by anyone (anonymous visitors)
      allow create: if true;
      // Only admins can read the click history
      allow read, list: if isAdmin();
    }
    
    // CPM History collection rules
    match /cpmHistory/{cpmId} {
      // Anyone can read the active CPM rate
      allow get: if true;
      // Only admins can read the full history and create new entries
      allow list, write: if isAdmin();
    }
    
    // Payout Requests collection rules
    match /payoutRequests/{payoutId} {
      // Users can create/read their own requests
      allow create, list, get: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Admins can read/write all requests
      allow read, write: if isAdmin();
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
        // Users can read their own notifications
        allow get, list: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // Users can mark their own notifications as read
        allow update: if isSignedIn() && request.auth.uid == resource.data.userId && request.resource.data.keys().hasOnly(['isRead']);
        // Admins can write notifications (e.g., for system-wide announcements)
        allow create: if isAdmin();
    }

    // Support Tickets collection rules
    match /supportTickets/{ticketId} {
        // Users can create/read their own tickets
        allow create, get, list: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // Admins can read/write all tickets
        allow read, write: if isAdmin();
        
        // Rules for the messages subcollection
        match /messages/{messageId} {
             // Users can read messages in their own tickets and add new messages
             allow read, create: if isSignedIn() && get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId == request.auth.uid;
             // Admins can read/write all messages
             allow read, write: if isAdmin();
        }
    }
    
    // Global Rules collection rules
    match /globalRules/{ruleId} {
      // Allow read for everyone, as they are needed on the public link gate
      allow read: if true;
      // Only admins can create, update, or delete global rules
      allow write: if isAdmin();
    }
  }
}
