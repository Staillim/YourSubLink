rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // LINK RULES
    match /links/{linkId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks'])) || 
                      (request.auth != null && resource.data.userId == request.auth.uid);
    }
    
    // USER RULES
    match /users/{userId} {
      // Allow admins to do anything.
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Allow users to create their own profile.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow users to update their own display name and photo.
      // They cannot change their role or earnings.
      allow update: if request.auth.uid == userId && 
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL']);
    }

    // PAYOUT REQUEST RULES
    match /payoutRequests/{requestId} {
        // Admins can manage all requests.
        allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

        // Users can read their own requests.
        allow list, get: if request.auth != null && resource.data.userId == request.auth.uid;

        // Users can create a request if:
        // 1. The userId matches their own.
        // 2. The requested amount is valid and less than or equal to their available balance.
        allow create: if request.auth != null && 
                        request.resource.data.userId == request.auth.uid &&
                        request.resource.data.amount > 0 &&
                        let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
                        let availableBalance = userProfile.generatedEarnings - userProfile.paidEarnings - userProfile.payoutsPending;
                        request.resource.data.amount <= availableBalance;
    }
  }
}
