rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ================================
    // Funciones Helpers
    // ================================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // ================================
    // LINKS
    // ================================
    match /links/{linkId} {
      // Cualquiera puede leer un link si conoce su ID. Necesario para el ClientComponent
      allow get: if true;

      // Cualquiera puede realizar la consulta específica para encontrar un enlace por su shortId.
      // Esto permite que el ClientComponent descubra el linkId.
      allow list: if request.query.keys().hasOnly(['where', 'limit']) &&
                     request.query.where[0][0] == 'shortId' &&
                     request.query.where[0][1] == '==' &&
                     request.query.limit <= 1;

      // Solo el dueño puede crear o modificar su propio enlace.
      allow create, update, delete: if isOwner(request.resource.data.userId);
    }

    // ================================
    // CLICKS (visitas)
    // ================================
    match /clicks/{clickId} {
      // Cualquier visitante puede crear un nuevo documento de click.
      // La seguridad se aplica aquí: la escritura solo se permite si el
      // linkId existe en los datos de la solicitud y si el propietario
      // de ese enlace no está suspendido.
      allow create: if request.resource.data.linkId != null &&
                     exists(/databases/$(database)/documents/links/$(request.resource.data.linkId)) &&
                     get(/databases/$(database)/documents/users/$(get(/databases/$(database)/documents/links/$(request.resource.data.linkId)).data.userId)).data.accountStatus != 'suspended';

      // Nadie puede leer, editar o borrar clicks directamente. Esto protege los datos de las visitas.
      allow read, update, delete: if false;
    }

    // ================================
    // USERS
    // ================================
    match /users/{userId} {
      // Cualquiera puede leer los datos de un usuario. Esto es necesario para que el
      // ClientComponent verifique si el propietario del enlace está suspendido.
      // No se expone información sensible aquí, ya que los datos críticos no se leen.
      allow get: if true;
      
      // Los usuarios autenticados pueden leer la lista de usuarios (necesario para el admin)
      // pero el admin es el único que puede ver realmente los datos.
      allow list: if isAuthenticated();

      // Solo el dueño de la cuenta puede escribir en su propio documento.
      // El admin tiene una regla global que le permite escribir también.
      allow write: if isOwner(userId) || isAdmin();
    }

    // ================================
    // COLECCIONES DE USUARIO (Notificaciones, Pagos)
    // ================================
    match /payoutRequests/{requestId} {
      // El dueño o un admin pueden leer/listar las solicitudes de pago.
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      // Solo el dueño puede crear una solicitud.
      allow create: if isOwner(request.resource.data.userId);
      // Solo el admin puede actualizar (aprobar/rechazar) una solicitud.
      allow update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
      // El dueño o un admin pueden leer/listar las notificaciones.
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      // Solo el admin puede crear notificaciones (a través de batch writes).
      allow write: if isAdmin();
    }

    // ================================
    // COLECCIONES DE ADMIN (CPM, Soporte)
    // ================================
    match /cpmHistory/{historyId} {
      allow read, list: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /supportTickets/{ticketId} {
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      allow create, update: if isOwner(request.resource.data.userId) || isAdmin();

      match /messages/{messageId} {
        allow read, list, create: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
      }
    }
  }
}
