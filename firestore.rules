
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow create: if request.auth.uid != null;
      allow read, update: if request.auth.uid == userId || isAdmin();
    }
    
    match /links/{linkId} {
      allow read: if isAdmin();
      allow create: if request.auth.uid != null;
      allow read, update, delete: if request.auth.uid == resource.data.userId;
    }

    match /clicks/{clickId} {
      allow create;
      allow read: if isAdmin();
    }

    match /payoutRequests/{requestId} {
      allow read, write: if isAdmin();
      allow create: if request.auth.uid != null;
      allow read: if request.auth.uid == resource.data.userId;
    }

    match /cpmHistory/{historyId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read: if request.auth.uid == resource.data.userId || isAdmin();
        allow create: if isAdmin(); // Or based on your logic for creating notifications
    }

    match /settings/{settingId} {
        allow read: if request.auth.uid != null;
        allow write: if isAdmin();
    }
    
    // Fallback rule for any other collection
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

    