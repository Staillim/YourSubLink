rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if only allowed fields are being updated
    function isUpdatingAllowedFields(allowedFields) {
      return request.resource.data.keys().hasOnly(allowedFields);
    }
    
    // Helper function to check if the incoming data only increments fields
    function isIncrementing(field, value) {
      return request.resource.data[field] == resource.data[field] + value;
    }

    // Users can only read/update their own profile. Admins can read anyone's.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId;
      // Allow user to update their own profile, but not change their role or earnings.
      // Admins can update anything.
      allow update: if isAdmin() || (request.auth.uid == userId && !('role' in request.resource.data));
    }

    match /links/{linkId} {
      // Public can get a link for redirection.
      allow get: if true;
      
      // Logged-in users can list their own links. Admins can list all.
      allow list: if request.auth != null; 
      
      // Users can create links for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;
      
      // Users can update their own links.
      // Public can ONLY update the 'clicks' and 'generatedEarnings' fields.
      allow update: if (isAdmin() || (request.auth != null && request.auth.uid == resource.data.userId)) || 
                     (request.auth == null && isIncrementing('clicks', 1) && 
                      (isUpdatingAllowedFields(['clicks', 'generatedEarnings']) || isUpdatingAllowedFields(['clicks'])));

      // Users can delete their own links. Admins can delete any.
      allow delete: if isAdmin() || (request.auth.uid == resource.data.userId);
    }
    
    // Clicks can be created by anyone (via server-side API).
    // Reading clicks is restricted to the link owner or an admin.
    match /clicks/{clickId} {
      allow create: if true;
      allow read, list: if isAdmin() || (request.auth != null && get(/databases/$(database)/documents/links/$(request.query.where.linkId)).data.userId == request.auth.uid);
    }

    // Users can create/read their own payout requests.
    // Admins can manage all payout requests.
    match /payoutRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, list: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.userId);
      allow update: if isAdmin();
    }
    
    // CPM history is read-only for authenticated users, managed by admins.
    match /cpmHistory/{cpmId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    // Notifications can be read by the user they are for.
    // Notifications can only be created by an admin or a secure server process.
    match /notifications/{notificationId} {
      allow read, list: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if isAdmin();
    }
  }
}
