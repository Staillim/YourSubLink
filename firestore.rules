rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Ensure the user is authenticated before checking their role.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // LINKS
    match /links/{linkId} {
      // ANYONE can read a single link document. This is required for the redirection flow.
      allow get: if true;
      
      // LOGGED-IN USERS can create links if the userId in the document matches their own.
      allow create: if request.auth != null && isOwner(request.resource.data.userId);

      // ONLY THE OWNER OR AN ADMIN can update or delete their own link.
      allow update, delete: if request.auth != null && (isOwner(resource.data.userId) || isAdmin());

      // No one can list all links except admins.
      allow list: if isAdmin();
    }

    // CLICKS
    // This collection is currently not used for writes from the client.
    // Reading is restricted to admins for analytics purposes.
    match /clicks/{clickId} {
      allow read, write: if false; // No client-side operations allowed
      allow list: if isAdmin();
    }

    // USERS
    match /users/{userId} {
      // Any authenticated user can create their own profile.
      allow create: if isOwner(userId);

      // A user can only read or update their own profile. Admins can read any profile.
      allow get: if request.auth != null && (isOwner(userId) || isAdmin());
      allow update: if request.auth != null && isOwner(userId);
      
      // Only admins can delete users or list all users.
      allow delete, list: if isAdmin();
    }
    
    // PAYOUT REQUESTS
    match /payoutRequests/{requestId} {
      // Users can create their own payout requests.
      allow create: if request.auth != null && isOwner(request.resource.data.userId);
      
      // Users can read their own requests. Admins can read all.
      allow get, list: if request.auth != null && (isOwner(resource.data.userId) || isAdmin());
      
      // Only admins can update (approve/reject) requests.
      allow update: if isAdmin();
      
      // Users cannot delete requests.
      allow delete: if false;
    }
    
    // NOTIFICATIONS
    match /notifications/{notificationId} {
        // Users can read their own notifications.
        allow get, list: if request.auth != null && isOwner(resource.data.userId);
        
        // Users can update their own notifications (e.g., mark as read).
        allow update: if request.auth != null && isOwner(resource.data.userId);
        
        // Notifications are created by server-side logic or secure client logic (e.g., admin actions).
        // No one can create notifications directly with this rule, it's handled via secure flows.
        allow create: if isAdmin(); // Only admins can create notifications directly
        
        // Users cannot delete notifications.
        allow delete: if false;
    }
    
    // CPM HISTORY
    match /cpmHistory/{cpmId} {
        // Anyone can read the CPM history (e.g., to calculate earnings).
        allow get, list: if true;
        
        // Only admins can create or update CPM history.
        allow create, update, delete: if isAdmin();
    }
    
    // SUPPORT TICKETS
    match /supportTickets/{ticketId} {
        // Users can create their own support tickets.
        allow create: if request.auth != null && isOwner(request.resource.data.userId);
        
        // Users can read/update their own tickets. Admins can read/update any ticket.
        allow get, update: if request.auth != null && (isOwner(resource.data.userId) || isAdmin());
        
        // Users cannot delete tickets, only admins.
        allow delete: if isAdmin();
        
        match /messages/{messageId} {
            // Users can read messages in their own tickets. Admins can read all.
            allow get, list: if request.auth != null && (exists(/databases/$(database)/documents/supportTickets/$(ticketId)) && (get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId == request.auth.uid || isAdmin()));
            
            // Users can create messages in their own tickets. Admins can create messages in any.
            allow create: if request.auth != null && (exists(/databases/$(database)/documents/supportTickets/$(ticketId)) && (get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId == request.auth.uid || isAdmin()));
        }
    }
  }
}
