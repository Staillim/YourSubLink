rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /links/{linkId} {
      allow get: if true;
      allow list: if request.query.get('where') != null && request.query.where[0][0] == 'shortId' && request.query.get('limit') <= 1;
      allow create, update, delete: if isOwner(request.resource.data.userId);

      // This rule allows anonymous visitors to increment clicks, but it's now handled by the 'clicks' collection.
      // We can leave it for now or remove it. For safety, let's keep the user-only write rule.
    }

    match /clicks/{clickId} {
      // A visitor can create a click if the link exists and its owner is not suspended.
      allow create: if get(/databases/$(database)/documents/links/$(request.resource.data.linkId)).data.userId == get(/databases/$(database)/documents/users/$(get(/databases/$(database)/documents/links/$(request.resource.data.linkId)).data.userId)).data.uid &&
                       get(/databases/$(database)/documents/users/$(get(/databases/$(database)/documents/links/$(request.resource.data.linkId)).data.userId)).data.accountStatus != 'suspended';

      allow read, update, delete: if false; // Clicks are immutable after creation.
    }

    match /users/{userId} {
      // Allow anyone to read the user document to check status, etc.
      allow get: if true;

      // Only the user themselves or an admin can write to the user document.
      allow write: if isOwner(userId) || isAdmin();
      
      // Admins can list all users.
      allow list: if isAdmin();
    }

    match /notifications/{notificationId} {
      allow get, write: if isOwner(resource.data.userId);
      allow list: if isOwner(request.query.where[0][2]);
    }

    match /cpmHistory/{historyId} {
      // Authenticated users can read CPM history to see rates.
      allow read: if isAuthenticated();
      // Only admins can change CPM rates.
      allow write, list: if isAdmin();
    }

    match /payoutRequests/{requestId} {
      // An owner can get their own request, an admin can get any.
      allow get: if isOwner(resource.data.userId) || isAdmin();
      // An owner can create a request.
      allow create: if isOwner(request.resource.data.userId);
      // An admin can update (approve/reject) a request.
      allow update: if isAdmin();
      // An owner can list their own payout requests. Admins can list all.
      allow list: if (isAuthenticated() && request.query.where[0][2] == request.auth.uid) || isAdmin();
    }

    match /supportTickets/{ticketId} {
      allow get, create, update: if isOwner(resource.data.userId) || isAdmin();
      allow list: if (isAuthenticated() && request.query.where[0][2] == request.auth.uid) || isAdmin();

      match /messages/{messageId} {
        allow get, list, create: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
      }
    }
    
    // Fallback rule for Admins to be able to list any other collection they might need.
    match /{document=**} {
       allow list: if isAdmin();
    }
  }
}
