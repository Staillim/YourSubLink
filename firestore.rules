rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ================================
    // Funciones Helpers
    // ================================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function linkExistsAndOwnerIsNotSuspended(linkId) {
      let linkDoc = get(/databases/$(database)/documents/links/$(linkId));
      let ownerId = linkDoc.data.userId;
      let ownerDoc = get(/databases/$(database)/documents/users/$(ownerId));

      return linkDoc.exists && ownerDoc.data.accountStatus == 'active';
    }
    
    // ================================
    // LINKS
    // ================================
    match /links/{linkId} {
      // ✅ Cualquiera puede leer un link por ID
      allow get: if true;

      // ✅ Permitir consultas por shortId (con límites)
      allow list: if request.query.whereField == 'shortId' &&
                     request.query.limit <= 1;

      // ✅ Solo el dueño puede crear/update/delete
      allow create, update, delete: if isOwner(request.resource.data.userId);

      // (obsoleto) Subcolección clicks desactivada
      match /clicks/{clickId} {
        allow read, write: if false;
      }
    }

    // ================================
    // CLICKS (visitas)
    // ================================
    match /clicks/{clickId} {
      // ✅ Cualquier visitante puede registrar su visita
      allow create: if linkExistsAndOwnerIsNotSuspended(request.resource.data.linkId);

      // ❌ Nadie puede leer, editar o borrar clicks directamente, excepto admin para listarlos
      allow get, update, delete: if false;
      allow list: if isAdmin();
    }

    // ================================
    // USERS
    // ================================
    match /users/{userId} {
      // ✅ Cualquiera puede leer un usuario (para verificar si está suspendido)
      allow get: if true;

      // ✅ Solo el dueño o un admin puede escribir
      allow write: if isOwner(userId) || isAdmin();
      
      // ✅ Solo admin puede listar usuarios
      allow list: if isAdmin();
    }

    // ================================
    // NOTIFICACIONES
    // ================================
    match /notifications/{notificationId} {
      allow read, write: if isOwner(resource.data.userId);
      allow list: if isOwner(request.query.where.filter(f => f.fieldPath == 'userId').pop().value);
    }

    // ================================
    // HISTORIAL DE CPM
    // ================================
    match /cpmHistory/{historyId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
      allow list: if isAdmin();
    }

    // ================================
    // SOLICITUDES DE PAGO
    // ================================
    match /payoutRequests/{requestId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin();
      allow list: if isOwner(request.query.where.filter(f => f.fieldPath == 'userId').pop().value) || isAdmin();
    }

    // ================================
    // TICKETS DE SOPORTE
    // ================================
    match /supportTickets/{ticketId} {
      allow read, create, update: if isOwner(get(path(ticketId)).data.userId) || isAdmin();
      allow list: if isOwner(request.query.where.filter(f => f.fieldPath == 'userId').pop().value) || isAdmin();

      match /messages/{messageId} {
        allow read, create: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
        allow list: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
      }
    }
  }
}
