rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // LINKS
    match /links/{linkId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Allow public writes for click/earnings and owner writes for details.
      allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'generatedEarnings'])) || 
                      (request.auth != null && resource.data.userId == request.auth.uid && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['title', 'description', 'rules', 'monetizable']));
    }

    // USERS
    match /users/{userId} {
        allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
        allow read: if request.auth != null;
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
        // Allow users to update their own profile, admins to update anything,
        // and allow public writes for incrementing earnings.
        allow update: if (request.auth != null && request.auth.uid == userId &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL'])) ||
                      (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['generatedEarnings']));
    }

    // PAYOUT REQUESTS
    match /payoutRequests/{requestId} {
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || 
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
      
    // NOTIFICATIONS
    match /notifications/{notificationId} {
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        allow list: if request.auth != null;
        
        // Secure creation: only allow if the write batch comes from a valid click registration.
        // For simplicity in client-side logic, we'll allow any authenticated or unauthenticated write
        // but in a real production app, this would be locked down to a backend function.
        allow create: if true;
    }
      
    // CLICKS
    match /clicks/{clickId} {
        // Only allow creation of click documents. 
        // No one can read/list/update/delete, protecting IP data.
        allow create: if true;
        allow read, update, delete, list: if false;
    }
  }
}
