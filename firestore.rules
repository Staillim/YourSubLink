rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // LINKS
    match /links/{linkId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'realClicks', 'generatedEarnings']) ||
                      (request.auth != null && (
                          (resource.data.userId == request.auth.uid && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['title', 'description', 'rules', 'monetizable'])) ||
                          (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
                      ));
      
      allow delete: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // USERS
    match /users/{userId} {
        allow read: if request.auth != null;
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        
        allow create: if request.auth != null && request.auth.uid == userId && 
                        request.resource.data.role != 'admin' ||
                        request.resource.data.email == 'harrigta@gmail.com';

        allow update: if (request.auth != null && (
                        (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL'])) ||
                        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
                      ));
    }

    // PAYOUT REQUESTS
    match /payoutRequests/{requestId} {
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || 
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

        // Allow users to create requests if they are authenticated
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

        // Admins can update any payout request
        allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
      
    // NOTIFICATIONS
    match /notifications/{notificationId} {
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        allow create: if true; // Created by the system
        allow list: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
      
    // CLICKS
    match /clicks/{clickId} {
        allow create: if true;

        // Allow reading/listing clicks ONLY by the link owner or an admin.
        allow read, list: if request.auth != null && (
                            get(/databases/$(database)/documents/links/$(resource.data.linkId)).data.userId == request.auth.uid ||
                            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                          );

        // Nobody can update or delete click logs.
        allow update, delete: if false;
    }

    // SETTINGS
    match /settings/global {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
