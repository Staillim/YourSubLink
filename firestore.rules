rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isAuth() && request.auth.uid == uid;
    }
    
    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Collection: users
    match /users/{userId} {
      allow create: if isAuth();
      allow get: if isAuth(); // Any auth user can read a profile
      allow list: if isAdmin(); // Only admins can list all users
      allow update: if isUser(userId) || isAdmin(); // User can update their own profile, or admin can
      allow delete: if isAdmin();
    }

    // Collection: links
    match /links/{linkId} {
      allow create: if isAuth();
      // An individual link can be read by anyone for redirection purposes
      allow get: if isAuth(); // Allow any auth'd user to get a link, gate logic is in client.
      allow list: if isAdmin(); // Only admins can list all links
      allow update, delete: if isUser(resource.data.userId) || isAdmin();
    }

    // Collection: clicks
    // Clicks are created in a batch write with a link update, rules on that apply.
    // Reading click history is done on the client, so we need to allow reads.
    match /clicks/{clickId} {
      allow create: if true; // Anyone can create a click (via API)
      allow get, list: if isAuth(); // User/Admin can read clicks for their stats pages.
    }

    // Collection: payoutRequests
    match /payoutRequests/{requestId} {
      allow create: if isUser(request.resource.data.userId); // User can create their own payout request
      allow get, list: if isUser(resource.data.userId) || isAdmin();
      allow update: if isAdmin(); // Only admins can update status (approve/reject)
    }

    // Collection: notifications
    match /notifications/{notificationId} {
      allow create: if true; // System/admin can create notifications
      allow get, list: if isUser(resource.data.userId) || isAdmin();
    }
    
    // Collection: cpmHistory
    match /cpmHistory/{docId} {
       allow get, list: if isAdmin();
       allow create, update, delete: if isAdmin();
    }
  }
}
