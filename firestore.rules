
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===================================
    // Helper Functions
    // ===================================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // ===================================
    // Collection: links
    // ===================================
    match /links/{linkId} {
      // ANYONE can get a link if they know its full ID.
      allow get: if true;

      // ANYONE can query the links collection ONLY if they are looking for a specific shortId.
      // This is crucial for the /link/{shortId} page to work for anonymous visitors.
      allow list: if request.query.keys().hasOnly(['where', 'limit']) &&
                   string(request.query.where[0][0]) == 'shortId' &&
                   string(request.query.where[0][1]) == '==' &&
                   request.query.limit <= 1;

      // ONLY the owner can create, update, or delete their own link.
      allow create, update, delete: if isOwner(request.resource.data.userId);
    }

    // ===================================
    // Collection: clicks
    // ===================================
    match /clicks/{clickId} {
      // ANYONE can create a click document IF:
      // 1. The userId field in the new click document is not null.
      // 2. The user account corresponding to that userId is NOT suspended.
      allow create: if request.resource.data.userId != null &&
                     get(/databases/$(database)/documents/users/$(request.resource.data.userId)).data.accountStatus != 'suspended';

      // NO ONE can read, update, or delete click documents directly.
      allow read, update, delete: if false;
    }

    // ===================================
    // Collection: users
    // ===================================
    match /users/{userId} {
      // ANYONE can read a user's profile. This is needed to check the accountStatus.
      // Sensitive information should not be stored here.
      allow get: if true;

      // ONLY the owner can write to their own profile.
      allow write: if isOwner(userId);
    }

    // ===================================
    // Collection: notifications
    // ===================================
    match /notifications/{notificationId} {
      allow read, write: if isOwner(resource.data.userId);
      // Let authenticated users list their own notifications.
      allow list: if isAuthenticated() && request.query.where[0][2] == request.auth.uid;
    }

    // ===================================
    // Collection: cpmHistory
    // ===================================
    match /cpmHistory/{historyId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // ===================================
    // Collection: payoutRequests
    // ===================================
    match /payoutRequests/{requestId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin();
      // Let authenticated users list their own payout requests.
      allow list: if isAuthenticated() && request.query.where[0][2] == request.auth.uid;
    }
    
    // ===================================
    // Collection: supportTickets
    // ===================================
    match /supportTickets/{ticketId} {
      allow read, create, update: if isOwner(resource.data.userId) || isAdmin();
      allow list: if isAuthenticated() && (request.query.where[0][2] == request.auth.uid || isAdmin());

      match /messages/{messageId} {
        allow read, create: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
        allow list: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
      }
    }

    // ===================================
    // Admin list permissions for all other collections
    // ===================================
    match /{path=**}/users/{userId} {
      allow list: if isAdmin();
    }
    match /{path=**}/links/{linkId} {
       allow list: if isAdmin();
    }
     match /{path=**}/payoutRequests/{requestId} {
       allow list: if isAdmin();
    }
  }
}
