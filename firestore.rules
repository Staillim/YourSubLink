rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================================================
    // Helper Functions
    // =================================================================
    
    // Checks if the user making the request has the 'admin' role.
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Checks if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    // Checks if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // =================================================================
    // Users Collection
    // =================================================================
    match /users/{userId} {
      // READ: Users can read their own profile. Admins can read any profile.
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      
      // CREATE: A user can create their own profile document.
      allow create: if isOwner(userId);
      
      // UPDATE: 
      // - A user can only update their own displayName.
      // - An admin can update other fields (role, status, earnings, etc.).
      allow update: if isAuthenticated() && (
        (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName'])) ||
        isAdmin()
      );
    }

    // =================================================================
    // Links Collection
    // =================================================================
    match /links/{linkId} {
      // READ: Anyone can read a link document. This is necessary for the link redirection page.
      allow read: if true;
      
      // CREATE: An authenticated user can create a new link.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      
      // UPDATE:
      // - The owner can update their own link details.
      // - The backend (represented by admin role) can update earnings and history.
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin()
      );
      
      // DELETE: The owner or an admin can delete a link.
      allow delete: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }

    // =================================================================
    // Clicks Collection
    // =================================================================
    match /clicks/{clickId} {
      // READ:
      // - Admins can read all click data for analysis.
      // - A user can read the clicks associated with their own links.
      allow read: if isAuthenticated() && (
        isAdmin() || 
        get(/databases/$(database)/documents/links/$(resource.data.linkId)).data.userId == request.auth.uid
      );
      
      // CREATE: Anyone can create a click log. This is a public action.
      allow create: if true;
      
      // UPDATE: Only admins (representing the backend process) can update a click to mark it as processed.
      allow update: if isAuthenticated() && isAdmin();
    }
    
    // =================================================================
    // Notifications Collection
    // =================================================================
    match /notifications/{notificationId} {
      // READ, UPDATE: Only the user receiving the notification can read or update it (e.g., mark as read).
      allow read, update: if isAuthenticated() && isOwner(resource.data.userId);
      // CREATE: Only admins (backend) can create notifications.
      allow create: if isAuthenticated() && isAdmin();
    }
    
    // =================================================================
    // Payout Requests Collection
    // =================================================================
    match /payoutRequests/{requestId} {
      // READ:
      // - A user can read their own payout requests.
      // - An admin can read all requests.
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      
      // CREATE: An authenticated user can create a payout request.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      
      // UPDATE: Only an admin can update a request (e.g., approve or reject).
      allow update: if isAuthenticated() && isAdmin();
    }
    
    // =================================================================
    // CPM History Collection
    // =================================================================
    match /cpmHistory/{cpmId} {
      // READ: Any authenticated user can read the CPM history to calculate earnings.
      allow read: if isAuthenticated();
      // WRITE: Only admins can create or update CPM history.
      allow write: if isAuthenticated() && isAdmin();
    }
    
    // =================================================================
    // Support Tickets Collection
    // =================================================================
    match /supportTickets/{ticketId} {
      // READ, UPDATE: The owner of the ticket or an admin can read/update it.
      allow read, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      // CREATE: An authenticated user can create a ticket.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);

      // Messages Subcollection
      match /messages/{messageId} {
        // READ: The owner or an admin can read messages.
        allow read: if isAuthenticated() && (isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin());
        // CREATE: The owner or an admin (support) can create messages.
        allow create: if isAuthenticated() && (isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin());
      }
    }
  }
}
