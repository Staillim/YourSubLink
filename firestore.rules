
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the incoming request is from the authenticated user
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // USERS Collection
    match /users/{userId} {
      // Anyone can read a user profile (needed for checking suspended status)
      allow read: if true;
      // Only the owner can update their own profile
      allow update: if isOwner(userId);
      // Only admins can update any user profile
      allow write: if isAdmin();
      // Users cannot be deleted from the client
      allow delete: if false;
    }

    // LINKS Collection
    match /links/{linkId} {
      // Anyone can read link documents
      allow read: if true;
      // Only authenticated users can create links
      allow create: if isOwner(request.resource.data.userId);
      // Only the link owner can update their own link
      allow update: if isOwner(get(/databases/$(database)/documents/links/$(linkId)).data.userId);
      // Only the link owner or an admin can delete a link
      allow delete: if isOwner(get(/databases/$(database)/documents/links/$(linkId)).data.userId) || isAdmin();
      
      // Admin override for full access
      allow write: if isAdmin();
    }

    // CLICKS Collection
    match /clicks/{clickId} {
      // Anyone can create a click log, but only if the link's owner is not suspended.
      // This rule expects the client to provide the `userId` of the link owner in the click document.
      allow create: if get(/databases/$(database)/documents/users/$(request.resource.data.userId)).data.accountStatus != 'suspended';

      // No one can read, update, or delete click logs from the client.
      allow read, update, delete: if false;
    }

    // PAYOUT REQUESTS Collection
    match /payoutRequests/{payoutId} {
      // Users can list and read their own payout requests.
      allow read: if isOwner(resource.data.userId);
      // Users can create their own payout requests.
      allow create: if isOwner(request.resource.data.userId);
      
      // Admins can read and update any payout request.
      allow list, get, update: if isAdmin();
      // No one can delete payout requests from the client.
      allow delete: if false;
    }

    // NOTIFICATIONS Collection
    match /notifications/{notificationId} {
      // Users can read their own notifications.
      allow read: if isOwner(resource.data.userId);
      // Admins can read all notifications.
      allow list, get: if isAdmin();
      // Notifications are created by the server (or admin actions) and cannot be updated/deleted by users.
      allow write: if isAdmin();
      allow create, update, delete: if false;
    }

    // SUPPORT TICKETS Collection
    match /supportTickets/{ticketId} {
      // Users can read and write to their own tickets.
      allow read, write: if isOwner(resource.data.userId);
      // Admins can read and write to any ticket.
      allow get, list, write: if isAdmin();
      
      // Nested messages collection
      match /messages/{messageId} {
        // Users can write messages to their own tickets.
        allow create: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId);
        // Only ticket owner and admins can read messages.
        allow read: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
        
        // Admins can also create messages (replies).
        allow write: if isAdmin();
      }
    }
    
    // CPM HISTORY Collection
    match /cpmHistory/{historyId} {
      // Anyone can read the CPM history to calculate earnings.
      allow read: if true;
      // Only admins can create/update CPM history.
      allow write: if isAdmin();
    }
  }
}
