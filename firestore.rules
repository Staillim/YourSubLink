
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // LINKS
    match /links/{linkId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // Allow click increment and owner updates
      allow update: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks'])) || 
                      (request.auth != null && resource.data.userId == request.auth.uid);
    }

    // USERS
    match /users/{userId} {
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow read: if request.auth != null;
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // User can update their own profile, or an admin can update any user.
      allow update: if request.auth != null && 
                    ((request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL'])) ||
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'));
    }

    // PAYOUT REQUESTS
    match /payoutRequests/{requestId} {
      allow read, list: if request.auth != null && (resource.data.userId == request.auth.uid || 
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Admins can update any payout request
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
        // Can be created by a server-side process (represented here as anyone for the click-increment logic)
        allow create: if true; 

        // User can read their own notifications
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        // Admin can read all notifications
        allow list, read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

        // User can mark their own notifications as read
        allow update: if request.auth != null && resource.data.userId == request.auth.uid && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }
  }
}
