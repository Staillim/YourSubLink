rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      // Only allow reads if the user is authenticated
      if (request.auth == null) {
        return false;
      }
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
    }
    
    match /links/{linkId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read: if true;
      // Allow general updates only by owner/admin
      allow update: if isOwner(resource.data.userId) || isAdmin();
      // Allow anyone to update ONLY the 'clicks' and 'generatedEarnings' fields.
      // This is for the public-facing click counter.
      allow write: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'generatedEarnings']);
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /clicks/{clickId} {
      // Allow anyone to create a click log entry.
      allow create: if true;
      allow read, list: if isAdmin();
    }

    match /payoutRequests/{requestId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow update: if isAdmin();
        // Allow user to list their own requests, and admin to list all.
        allow list: if (request.query.where.path == 'userId' && request.query.where.value == request.auth.uid) || isAdmin();
    }

    match /cpmHistory/{cpmId} {
        allow read, list: if request.auth != null;
        allow create, update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read, list, update: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isAdmin() || isOwner(request.resource.data.userId);
    }
    
    match /supportTickets/{ticketId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow update: if isAdmin() || (isOwner(resource.data.userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastMessage', 'lastMessageTimestamp', 'isReadByAdmin', 'isReadByUser', 'status']));
      allow list: if (request.query.where.path == 'userId' && request.query.where.value == request.auth.uid) || isAdmin();
      
      match /messages/{messageId} {
        // Parent must exist for read/list. This is safe.
        allow read, list: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
        
        // On create (in a batch), parent does not exist yet. Check incoming data.
        allow create: if isOwner(request.resource.data.senderId) || request.resource.data.senderId == 'support';
      }
    }
  }
}