rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /links/{linkId} {
      // Allow anyone to read a link if they know the ID.
      allow get: if true;
      // Allow anyone to query for a link by its shortId. This is public.
      allow list: if request.query.get('where')[0][1] == 'shortId';

      // Only the owner can create, update, or delete their own links.
      allow create, update, delete: if isOwner(request.resource.data.userId);
    }

    match /clicks/{clickId} {
      // Allow anyone to create a click if the owner's account is active.
      // This is the security checkpoint for monetization.
      allow create: if get(/databases/$(database)/documents/users/$(request.resource.data.userId)).data.accountStatus == 'active';
      
      // No one can read or modify clicks directly after creation.
      allow read, update, delete: if false;
    }

    match /users/{userId} {
      // Allow anyone to get a user profile (e.g., to check suspension status).
      allow get: if true;
      
      // An admin can manage any user. A user can only manage their own profile.
      allow write: if isOwner(userId) || isAdmin();
      
      // Admins can list all users.
      allow list: if isAdmin();
    }

    match /notifications/{notificationId} {
      // A user can manage their own notifications.
      allow read, write: if isOwner(resource.data.userId);
      // A user can list their own notifications.
      allow list: if isOwner(request.query.get('where')[0][2]);
    }
    
    match /cpmHistory/{historyId} {
        // Authenticated users can see the CPM history. Admins can write it.
        allow read: if isAuthenticated();
        allow write: if isAdmin();
        // Admins can list the full history.
        allow list: if isAdmin();
    }

    match /payoutRequests/{requestId} {
      // The owner or an admin can read a payout request.
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // The owner can create a request.
      allow create: if isOwner(request.resource.data.userId);
      // Only an admin can update (approve/reject) a request.
      allow update: if isAdmin();
      // Users can list their own requests, admins can list all.
      allow list: if isAdmin() || isOwner(request.query.get('where')[0][2]);
    }

    match /supportTickets/{ticketId} {
      // The owner or an admin can access a support ticket.
      allow read, create, update: if isOwner(resource.data.userId) || isAdmin();
      // Users can list their own tickets, admins can list all.
      allow list: if isAdmin() || isOwner(request.query.get('where')[0][2]);

      match /messages/{messageId} {
        // The owner or an admin can read/create messages in a ticket.
        allow read, create: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
        // Users can list messages in their own tickets, admins can list messages in any.
        allow list: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
      }
    }
  }
}
