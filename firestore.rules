rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // LINKS
    match /links/{linkId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Allow authenticated users to update their own link's title, description, and rules.
      // Allow anyone (the system) to update clicks and generatedEarnings.
      allow update: if (request.auth != null && resource.data.userId == request.auth.uid && 
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['title', 'description', 'rules', 'monetizable'])) ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'generatedEarnings']));
    }

    // USERS
    match /users/{userId} {
        allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
        allow read: if request.auth != null;
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
        // Allow users to update their own profile fields.
        // Allow admins to update any user's role.
        // Allow the system to update a user's earnings.
        allow update: if (request.auth != null && request.auth.uid == userId &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL'])) ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['generatedEarnings'])) ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['paidEarnings'])) ||
                      (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // PAYOUT REQUESTS
    match /payoutRequests/{requestId} {
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || 
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

        // Allow users to create requests if they are authenticated
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

        // Admins can update any payout request
        allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
      
    // NOTIFICATIONS
    match /notifications/{notificationId} {
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        // Allow the system to create notifications.
        allow create: if true; 
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
      
    // CLICKS
    match /clicks/{clickId} {
        // Allow the system to create click documents.
        // Disallow any read, update, or delete to protect IP data.
        allow create: if true;
        allow read, update, delete, list: if false;
    }
  }
}
