rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId || isAdmin();
      // Admins can list all users
      allow list: if isAdmin();
    }

    match /links/{linkId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Allow the owner or an admin to update/delete
      allow update, delete: if resource.data.userId == request.auth.uid || isAdmin();
      
      // Allow public client to increment click counts and earnings, but not set them arbitrarily.
      // This is what the recordClick function uses.
      allow update: if request.auth == null
                    && request.resource.data.clicks == resource.data.clicks + 1
                    && request.resource.data.keys().hasAll(['clicks', 'realClicks', 'generatedEarnings', 'earningsByCpm'])
                    && request.resource.data.generatedEarnings > resource.data.generatedEarnings;

      // Admins can list all links
      allow list: if isAdmin();
    }
    
    match /clicks/{clickId} {
      allow create: if true;
      allow read, list: if isAdmin();
    }

    match /dailyStats/{day} {
        allow create, update: if true; // Clicks are public, anyone can trigger an update
        allow read, list: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow create: if true; // System can create notifications
        allow read, list: if request.auth != null; // Authenticated users can read their notifications
    }

    match /payoutRequests/{requestId} {
        allow create: if request.auth != null;
        allow read, list: if request.auth != null;
        allow update: if isAdmin();
    }
    
    match /settings/global {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /cpmHistory/{historyId} {
        // Anyone can read the history to find the active rate
        allow get, list: if true;
        // Only admins can create/update the history
        allow write: if isAdmin();
    }
  }
}
