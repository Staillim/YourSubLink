rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuth() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USERS Collection
    match /users/{userId} {
      // Permitir que cualquiera pueda leer (get) un usuario para que el cliente pueda obtener customCpm o accountStatus,
      // necesario para monetización y validaciones (esto es público porque no hay info sensible)
      allow get: if true;

      // Solo admins pueden listar usuarios
      allow list: if isAdmin();

      // Actualización: admins o dueño (sin poder cambiar role)
      allow update: if isAdmin() || (isOwner(userId) && request.resource.data.role == resource.data.role);

      // Crear: solo el dueño (normalmente creado automáticamente)
      allow create: if isOwner(userId);

      // No se permite borrar usuarios directamente
      allow delete: if false;
    }

    // LINKS Collection
    match /links/{linkId} {
      // Permitir lectura pública (get y list) para que cualquier visitante vea el link y pueda usarlo
      allow read: if true;

      // Crear: solo usuarios autenticados para sus propios links
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;

      // Actualizar: admins, dueño o solo para incrementar clicks y generatedEarnings (evita que alguien modifique otros campos)
      allow update: if isAdmin() ||
                      (isAuth() && resource.data.userId == request.auth.uid) ||
                      (
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['clicks', 'generatedEarnings']) &&
                        (request.resource.data.clicks == resource.data.clicks + 1)
                      );

      // Borrar: admins o dueño
      allow delete: if isAdmin() || (isAuth() && resource.data.userId == request.auth.uid);
    }

    // CLICKS Collection
    match /clicks/{clickId} {
      // Crear clicks es público, porque se usan para contabilizar visitas sin auth
      allow create: if true;

      // Leer/listar solo admins
      allow read, list: if isAdmin();
    }

    // PAYOUT REQUESTS Collection
    match /payoutRequests/{requestId} {
      // Crear solo el dueño autenticado
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;

      // Leer: admins o dueño
      allow get: if isAdmin() || (isAuth() && resource.data.userId == request.auth.uid);
      // List: Admins can list all, users can only list their own with a where clause
      allow list: if isAdmin() || (isAuth() && request.query.userId == request.auth.uid);

      // Actualizar: solo admins
      allow update: if isAdmin();

      // No se permite borrar
      allow delete: if false;
    }

    // CPM HISTORY Collection
    match /cpmHistory/{cpmId} {
      // Permitir lectura pública porque el CPM es info pública para calcular ganancias
      allow get, list: if true;

      // Crear y actualizar solo admins
      allow create, update: if isAdmin();

      // Borrar solo admins (opcional)
      allow delete: if isAdmin();
    }

    // NOTIFICATIONS Collection
    match /notifications/{notificationId} {
      // Leer y listar: admins o dueño
      allow get: if isAdmin() || (isAuth() && resource.data.userId == request.auth.uid);
      allow list: if isAdmin() || (isAuth() && request.query.userId == request.auth.uid);

      // Crear: sistema/admins (permitido siempre)
      allow create: if true;

      // Actualizar: admins o dueño
      allow update: if isAdmin() || (isAuth() && resource.data.userId == request.auth.uid);

      // No borrar
      allow delete: if false;
    }

    // SUPPORT TICKETS Collection
    match /supportTickets/{ticketId} {
      // Leer y listar: admins o dueño
      allow get: if isAdmin() || (isAuth() && resource.data.userId == request.auth.uid);
      allow list: if isAdmin() || (isAuth() && request.query.userId == request.auth.uid);

      // Crear: dueño autenticado
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;

      // Actualizar: admins o dueño
      allow update: if isAdmin() || (isAuth() && resource.data.userId == request.auth.uid);

      // Nested messages
      match /messages/{messageId} {
        // Leer/listar: admins o dueño del ticket
        allow read: if isAdmin() || (isAuth() && get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId == request.auth.uid);

        // Crear: admins o dueño autenticado
        allow create: if isAuth();

        // Actualizar: admins o dueño si ticket no está completado (puedes afinarlo según lógica)
        allow update: if isAdmin() || (get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.status != 'completed' && get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId == request.auth.uid);
      }
    }

     // GLOBAL RULES Collection
    match /globalRules/{ruleId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }

  }
}