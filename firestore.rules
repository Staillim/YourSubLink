rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ================================
    // Funciones Helpers
    // ================================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function linkOwnerIsNotSuspended(linkDoc) {
      return get(/databases/$(database)/documents/users/$(linkDoc.data.userId)).data.accountStatus != 'suspended';
    }

    // ================================
    // LINKS
    // ================================
    match /links/{linkId} {
      // ✅ Cualquiera puede leer (get) y consultar (list) la información de los enlaces.
      // Esto es necesario para que las páginas de redirección /link/[shortId] funcionen.
      allow read: if true;

      // ✅ Solo el dueño puede escribir en sus propios enlaces.
      allow write: if isOwner(request.resource.data.userId);

      // (subcolección obsoleta)
      match /clicks/{clickId} {
        allow read, write: if false;
      }
    }

    // ================================
    // CLICKS (visitas)
    // ================================
    match /clicks/{clickId} {
      // ✅ Cualquier visitante puede registrar su visita si el dueño del enlace no está suspendido.
      allow create: if linkOwnerIsNotSuspended(get(/databases/$(database)/documents/links/$(request.resource.data.linkId)));
      // ❌ Nadie puede leer, editar o borrar clicks directamente.
      allow read, update, delete: if false;
    }

    // ================================
    // USERS
    // ================================
    match /users/{userId} {
      // ✅ Cualquiera puede leer el perfil de un usuario (para verificar estado).
      allow get: if true;
      // ✅ Solo el dueño o un admin pueden escribir/actualizar el perfil.
      allow write: if isOwner(userId) || isAdmin();
      // ✅ Los admins pueden listar todos los usuarios.
      allow list: if isAdmin();
    }

    // ================================
    // NOTIFICACIONES
    // ================================
    match /notifications/{notificationId} {
      // ✅ El dueño puede leer y escribir. Un admin también puede escribir (para enviar notificaciones).
      allow read: if isOwner(resource.data.userId);
      allow write: if isOwner(request.resource.data.userId) || isAdmin();
      // ✅ El dueño puede listar sus notificaciones.
      allow list: if isOwner(request.query.get('where')[0][2]);
    }

    // ================================
    // HISTORIAL DE CPM
    // ================================
    match /cpmHistory/{historyId} {
      // ✅ Cualquier usuario autenticado puede leer el historial de CPM.
      allow read: if isAuthenticated();
      // ✅ Solo los admins pueden escribir/crear nuevas tasas de CPM.
      allow write: if isAdmin();
      // ✅ Solo los admins pueden listar el historial.
      allow list: if isAdmin();
    }

    // ================================
    // SOLICITUDES DE PAGO
    // ================================
    match /payoutRequests/{requestId} {
      // ✅ El dueño y los admins pueden leer una solicitud.
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // ✅ Solo el dueño puede crear una solicitud.
      allow create: if isOwner(request.resource.data.userId);
      // ✅ Solo los admins pueden actualizar (aprobar/rechazar) una solicitud.
      allow update: if isAdmin();
      // ✅ El dueño y los admins pueden listar las solicitudes.
      allow list: if (isAuthenticated() && request.query.get('where')[0][2] == request.auth.uid) || isAdmin();
    }

    // ================================
    // TICKETS DE SOPORTE
    // ================================
    match /supportTickets/{ticketId} {
      allow read, create, update: if isOwner(resource.data.userId) || isAdmin();
      allow list: if (isAuthenticated() && request.query.get('where')[0][2] == request.auth.uid) || isAdmin();

      match /messages/{messageId} {
        allow read, create, list: if isOwner(get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId) || isAdmin();
      }
    }
  }
}