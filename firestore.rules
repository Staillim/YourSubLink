rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      // Check if the user document exists and has the admin role.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
      allow list: if isAdmin();
    }

    match /links/{linkId} {
      allow get: if true; // anyone can get a link if they have the ID
      allow create: if request.auth != null;

      // Allow listing for two cases:
      // 1. A public user is querying by shortId to be redirected.
      // 2. An authenticated user is querying for their own links.
      allow list: if (request.query.keys().hasOnly(['where', 'limit']) && request.query.where[0][0] == 'shortId' && request.query.where[0][2] != '') ||
                    (request.auth != null && request.query.where[0][0] == 'userId' && request.query.where[0][2] == request.auth.uid) ||
                    isAdmin();

      allow update, delete: if resource.data.userId == request.auth.uid || isAdmin();
    }
    
    match /clicks/{clickId} {
      allow create: if true;
      allow read, list: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow create: if true;
        allow read, list: if request.auth != null && (get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId == request.auth.uid || isAdmin());
    }

    match /payoutRequests/{requestId} {
        allow create: if request.auth != null;
        allow read, list: if (request.auth != null && get(/databases/$(database)/documents/payoutRequests/$(requestId)).data.userId == request.auth.uid) || isAdmin();
        allow update: if isAdmin();
    }
    
    match /cpmHistory/{historyId} {
        allow read, list: if true;
        allow write: if isAdmin();
    }
  }
}
